{"version":3,"sources":["Home.js","Form.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","temperature","description","error","API_KEY","App","state","undefined","city","country","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","className","src_Home","src_Form","this","src_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAWeA,EATF,WACT,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,iFCSGC,EAXF,SAAAC,GACT,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,YAClBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,eAC3CT,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAY,kBAC9CT,EAAAC,EAAAC,cAAA,UAAQK,KAAK,WAAb,qBCCDG,EATC,SAAAN,GACZ,OACIJ,EAAAC,EAAAC,cAAA,WACKE,EAAMO,aAAeX,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMO,aAC5CP,EAAMQ,aAAeZ,EAAAC,EAAAC,cAAA,wBAAgBE,EAAMQ,aAC3CR,EAAMS,OAASb,EAAAC,EAAAC,cAAA,SAAIE,EAAMS,SCChCC,EAAU,mCAqDDC,6MAlDbC,MAAQ,CACNL,iBAAaM,EACbC,UAAMD,EACNE,aAASF,EACTL,iBAAaK,KAGfX,iDAAa,SAAAc,EAAMC,GAAN,IAAAH,EAAAC,EAAAG,EAAAC,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACIX,EAAOG,EAAES,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUE,EAAES,OAAOC,SAASZ,QAAQa,MAH/BN,EAAAE,KAAA,EAIYK,MAAK,oDAAAC,OAC0BhB,EAD1B,KAAAgB,OACkCf,EADlC,WAAAe,OACmDpB,EADnD,oBAJjB,cAILQ,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAOQN,EAASc,OAPjB,OAOLb,EAPKG,EAAAS,KASPjB,GAAQC,EACVkB,EAAKC,SAAS,CACZ3B,YAAaY,EAAKgB,KAAKC,KACvBtB,KAAMK,EAAKf,KACXW,QAASI,EAAKkB,IAAItB,QAClBP,YAAaW,EAAKmB,QAAQ,GAAG9B,cAG/ByB,EAAKC,SAAS,CACZ3B,iBAAaM,EACbC,UAAMD,EACNE,aAASF,EACTL,iBAAaK,EACbJ,MAAO,8CAtBA,yBAAAa,EAAAiB,SAAAvB,oIA2BX,OACEpB,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,WACb5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAMxC,WAAYyC,KAAKzC,aACvBN,EAAAC,EAAAC,cAAC8C,EAAD,CACErC,YAAaoC,KAAK/B,MAAML,YACxBO,KAAM6B,KAAK/B,MAAML,YACjBQ,QAAS4B,KAAK/B,MAAMG,QACpBP,YAAamC,KAAK/B,MAAMJ,YACxBC,MAAOkC,KAAK/B,MAAMH,gBA5CVoC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"js/main.6908d9eb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>Weather Today</h1>\n            <p>Find out today's temperature and conditions anywhere in the world!</p>\n        </div>\n    );\n};\n\nexport default Home;","import React from \"react\";\n\n\n\nconst Form = props => {\n    return (\n        <div>\n            <form onSubmit={props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"Enter City\" />\n                <input type=\"text\" name=\"country\" placeholder=\"Enter Country\" />\n                <button type=\"primary\">Get My Weather</button>\n            </form>\n        </div>\n    );\n};\nexport default Form;","import React from \"react\";\n\nconst Weather = props => {\n    return (\n        <div>\n            {props.temperature && <p>Temperature: {props.temperature}</p>}\n            {props.description && <p>Conditions: {props.description}</p>}\n            {props.error && <p>{props.error}</p>}\n        </div>\n    );\n};\nexport default Weather;","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Home from \"./Home\";\nimport Form from \"./Form\";\nimport Weather from \"./Weather\";\n\n\n\nconst API_KEY = \"52c22aabd27dfb2bbb026631979c4c29\";\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    description: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=imperial`\n    );\n    const data = await api_call.json();\n\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        description: data.weather[0].description\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        error: \"Please enter the correct city and country\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Home />\n        <Form getWeather={this.getWeather} />\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.temperature}\n          country={this.state.country}\n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}